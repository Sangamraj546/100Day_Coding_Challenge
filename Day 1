Question. <https://www.geeksforgeeks.org/problems/node-at-distance/1>
Given a binary tree with n nodes and a non-negative integer k, the task is to count the number of special nodes.
A node is considered special if there exists at least one leaf in its subtree such that the distance between the node and leaf is exactly k.

Note: Any such node should be counted only once. For example, if a node is at a distance k from 2 or more leaf nodes, then it would add only 1 to our count.

My Solution:

class Solution
{
    public:
    //Function to return count of nodes at a given distance from leaf nodes.
    
    int check(Node* root, int k,int d){
        if(root->left==NULL && root->right==NULL){
            if(d==k){
                return 1;
            }
            else return 0;
        }
        int c=0;
        if(root->left){
            c = c|check(root->left,k,d+1);
        }
        if(root->right){
            c = c|check(root->right,k,d+1);
        }
        return c;
        
    }
    
    int traverse(Node* root, int k){
        if(root==NULL) return 0;
        int ans=0;
        
        if(check(root,k,0)){
            ans++;
        }
        ans+=traverse(root->left,k);
        ans+=traverse(root->right,k);
        return ans;
    }
    
    int printKDistantfromLeaf(Node* root, int k)
    {
    	//Add your code here. 
    	int ans=0;
    	ans+=traverse(root,k);
    	return ans;
    }
};

